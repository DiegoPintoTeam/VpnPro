#!/bin/bash
clear
{
#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#	SCRIPT: OTIMIZAR VpnPlus
#	DESARROLLADO POR:	Diego Pinto
#	CONTACTO TELEGRAM:	https://t.me/DiegoPintoTM
#	CANAL TELEGRAM:	https://t.me/DiegoPintoTM
#━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
fun_bar() {
	comando[0]="$1"
	comando[1]="$2"
	(
		[[ -e $HOME/fim ]] && rm $HOME/fim
		${comando[0]} -y >/dev/null 2>&1
		${comando[1]} -y >/dev/null 2>&1
		touch $HOME/fim
	) >/dev/null 2>&1 &
	tput civis
	echo -ne "     \033[1;32mAGUARDE \033[1;32m- \033[1;32m["
	while true; do
		for ((i = 0; i < 18; i++)); do
			echo -ne "\033[1;31m#"
			sleep .1s
		done
		[[ -e $HOME/fim ]] && rm $HOME/fim && break
		echo -e "\033[1;32m]"
		sleep 1s
		tput cuu1
		tput dl1
		echo -ne "     \033[1;32mAGUARDE \033[1;32m- \033[1;32m["
	done
	echo -e "\033[1;32m]\033[1;32m -\033[1;31m OK!\033[1;32m"
	tput cnorm
}
[[ $(grep -wc mlocate /var/lib/dpkg/statoverride) != '0' ]] && sed -i '/mlocate/d' /var/lib/dpkg/statoverride
clear
echo -e "\E[44;1;37m                 OPTIMIZAR SERVIDOR               \E[0m"
echo ""
echo -e "\033[1;32m               ACTUALIZANDO PAQUETES!          \033[0m"
echo ""
fun_bar 'apt-get update -y' 'apt-get upgrade -y'
echo ""
echo -e "\033[1;32m       SOLUCIONANDO PROBLEMAS DE LOS PAQUETES! "
echo""
fun_bar 'apt-get -f install'
echo""
echo -e "\033[1;32m            REMOVIENDO PAQUETES INUTILES! "
echo ""
fun_bar 'apt-get autoremove -y' 'apt-get autoclean -y'
echo ""
echo -e "\033[1;32m         REMOVIENDO PAQUETES CON PROBLEMAS! "
echo ""
fun_bar 'apt-get -f remove -y' 'apt-get clean -y'
#Limpiar cache de RAM
clear
echo -e "\033[1;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
MEM1=$(free | awk '/Mem:/ {print int(100*$3/$2)}')
ram1=$(free -h | grep -i mem | awk {'print $2'})
ram2=$(free -h | grep -i mem | awk {'print $4'})
ram3=$(free -h | grep -i mem | awk {'print $3'})
swap1=$(free -h | grep -i swap | awk {'print $2'})
swap2=$(free -h | grep -i swap | awk {'print $4'})
swap3=$(free -h | grep -i swap | awk {'print $3'})
echo -e "\033[1;31m➩\033[1;32mMEMORIA RAM\033[1;31m➩\033[0m                    \033[1;31m➩\033[1;32mSWAP\033[1;31m➩\033[0m"
echo -e " \033[1;32mTOTAL: \033[1;31m$ram1                   \033[1;32mTOTAL: \033[1;31m$swap1"
echo -e " \033[1;32mEN USO: \033[1;31m$ram3                  \033[1;32mEN USO: \033[1;31m$swap3"
echo -e " \033[1;32mLIBRE: \033[1;31m$ram2                   \033[1;32mLIBRE: \033[1;31m$swap2\033[0m"
echo ""
echo -e "\033[1;32mMEMORIA \033[1;32mRAM \033[1;32mANTES DE LA OPTIMIZACION: \033[1;31m"$MEM1%
echo ""
echo -e "\033[1;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
sleep 2s
echo ""
fun_limpram() {
	sync
	echo 3 >/proc/sys/vm/drop_caches
	sync && sysctl -w vm.drop_caches=3
	sysctl -w vm.drop_caches=0
	swapoff -a
	swapon -a
	sleep 4s
}
function aguarde() {
	sleep 1s
	helice() {
		fun_limpram >/dev/null 2>&1 &
		tput civis
		while [ -d /proc/$! ]; do
			for i in / - \\ \|; do
				sleep 1s
				echo -ne "\e[1D$i"
			done
		done
		tput cnorm
	}
	echo -ne "\033[1;32m LIMPIANDO MEMORIA \033[1;32mRAM \033[1;32mY \033[1;32mSWAP\033[1;31m.\033[1;31m.\033[1;31m.\033[1;31m"
	helice
	echo -e " \e[1DOK"
}
aguarde
sleep 1s
clear
echo -e "\033[1;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
echo ""
MEM2=$(free | awk '/Mem:/ {print int(100*$3/$2)}')
ram1=$(free -h | grep -i mem | awk {'print $2'})
ram2=$(free -h | grep -i mem | awk {'print $4'})
ram3=$(free -h | grep -i mem | awk {'print $3'})
swap1=$(free -h | grep -i swap | awk {'print $2'})
swap2=$(free -h | grep -i swap | awk {'print $4'})
swap3=$(free -h | grep -i swap | awk {'print $3'})
echo -e "\033[1;31m➩\033[1;32mMEMORIA RAM\033[1;31m➩\033[0m                    \033[1;31m➩\033[1;32mSWAP\033[1;31m➩\033[0m"
echo -e " \033[1;32mTOTAL: \033[1;31m$ram1                   \033[1;32mTOTAL: \033[1;31m$swap1"
echo -e " \033[1;32mEN USO: \033[1;31m$ram3                  \033[1;32mEN USO: \033[1;31m$swap3"
echo -e " \033[1;32mLIBRE: \033[1;31m$ram2                   \033[1;32mLIBRE: \033[1;31m$swap2\033[0m"
echo ""
echo -e "\033[1;32mMEMORIA \033[1;32mRAM \033[1;32 OPTIMIZADA:\033[1;31m" $MEM2%
echo ""
echo -e "\033[1;32mECONOMIA DE: \033[1;31m$(expr $MEM1 - $MEM2)%\033[0m"
echo ""
echo -e "\033[1;31m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
}
